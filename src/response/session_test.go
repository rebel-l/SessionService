package response

import (
	"github.com/stretchr/testify/assert"
	"testing"
	"time"
	"encoding/json"
)

func TestSessionDefault(t *testing.T) {
	now := time.Now()
	session := NewSession("",0)

	assert.NotEmpty(t, session.Id, "Id should be generated by default")
	assert.Regexp(t, "[0-9A-Za-z]{8}-([0-9A-Za-z]{4}-){3}[0-9A-Za-z]{12}", session.Id, "Id should be a UUID")
	assert.Empty(t, session.Data, "Data should be empty by default")
	assert.Equal(t, LIFETIME, session.Lifetime, "Default lifetime is not set")
	at := AssertTime{now.Unix() + LIFETIME, session.Expires}
	assert.Condition(t, at.greaterThanOrEqual, "Expires needs to be greater or equal than now + default lifetime")
	assert.Empty(t, session.Domain, "Domain should be empty by default")
}

func TestSessionIdAndLifetime(t *testing.T) {
	id := "66c691e4-d52d-451c-8d3c-064e174eb4b9"
	lifetime := 100
	now := time.Now()
	session := NewSession(id, lifetime)

	assert.Equal(t, id, session.Id, "Id is not set")
	assert.Equal(t, lifetime, session.Lifetime, "Lifetime is not set")
	at := AssertTime{now.Unix() + int64(lifetime), session.Expires}
	assert.Condition(t, at.greaterThanOrEqual, "Expires needs to be greater or equal than now + default lifetime")
}

func TestSessionJson(t *testing.T) {
	fixture := "{\"id\":\"12345\",\"data\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"lifetime\":150,\"expires\":2562,\"domain\":\"mydomain.example\"}"
	data := make(map[string]string)
	data["key1"] = "value1"
	data["key2"] = "value2"
	session := Session{
		Id: "12345",
		Data: data,
		Lifetime: 150,
		Expires: 2562,
		Domain: "mydomain.example",
	}

	result, err := json.Marshal(session)
	if err != nil {
		t.Fatal("JSON conversion failed: " + err.Error())
	}
	assert.Equal(t, fixture, string(result), "Struct was not converted correct to JSON")
}

func TestSessionGenerateId(t *testing.T) {
	ids := make([]string, 10)
	session := new(Session)
	for k := range ids {
		session.GenerateId()
		ids[k] = session.Id
	}

	// assert
	for _, v := range ids {
		assert.Equal(t, 1, countInArray(ids, v))
	}
}

func countInArray(list []string, match string) int {
	res := 0
	for _, elem := range list {
		if elem == match {
			res++
		}
	}
	return res
}

type AssertTime struct {
	expected int64
	actual int64
}

func (at *AssertTime) greaterThanOrEqual() bool {
	if at.actual >= at.expected {
		return true
	}
	return false
}
