swagger: '2.0'
info:
  description: This API is for a session service.
  version: "0.2.0"
  title: SessionService API
  # put the contact info for your development or API team
  contact:
    name: Rebel-L
    email: dj@rebel-l.net
    url: https://github.com/rebel-l

  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.en.html

# all paths will be relative to the basePath specified
# basePath: /v1

# tags are used for organizing operations
tags:
- name: internal
  description: secure internal calls
consumes: ['application/json']
produces: ['application/json']
schemes:
- https
- http
paths:
  /session:
    get:
      tags:
      - internal
      summary: Returns a session for a specific id.
      operationId: loadSession
      description: |
        By passing in the appropriate options, you can load the sesions for a
        specific id. If no id is provided in the parameters it returns a new
        and empty session.
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: pass the session id you want to load
        required: false
        type: string
        format: uuid
      - in: query
        name: regenerateId
        description: forces the service to generate a new session id.
        type: boolean
        required: false
      - in: query
        name: keys
        description: a comma seperated list of keys to return in the data object
        required: false
        type: string
        format: field1,field2
      - in: query
        name: domain
        description: an optional domain for the session
        type: string
        format: ^([0-9a-zA-Z-]+[\.])+[0-9a-zA-Z-]+$
        required: false
      responses:
        200:
          description: session id found and returned
          schema:
            $ref: '#/definitions/SessionResponse'
        201:
          description: session created
        400:
          description: bad input parameter
        404:
          description: session was not found or has expired
    put:
      tags:
      - internal
      summary: updates a session
      operationId: updateSession
      description: Updates the session.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: session
        description: pass the session you want to update
        schema:
          $ref: '#/definitions/SessionBody'
      responses:
        200:
          description: session updated
          schema:
            $ref: '#/definitions/SessionResponse'
        400:
          description: invalid input, data invalid
        404:
          description: session was not found or has expired
    delete:
      tags:
      - internal
      summary: deletes a session
      operationId: deleteSession
      description: Deletes a session and returns a new empty one.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: pass the session id you want to delete
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: session id found and deleted
          schema:
            $ref: '#/definitions/SessionResponse'
        400:
          description: bad input parameter
        404:
          description: session was not found or has expired
definitions:
  SessionResponse:
    type: object
    required:
    - id
    - data
    - lifetime
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      data:
        type: array
        items:
          $ref: '#/definitions/Data'
      lifetime:
        type: integer
        format: int32
        example: 1800
      expires:
        type: integer
        format: timestamp
        example: 1484485453
      domain:
        type: string
        format: ^([0-9a-zA-Z-]+[\.])+[0-9a-zA-Z-]+$
        example: www.dancedancerevolution.party
  SessionBody:
    type: object
    required:
    - id
    - data
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      data:
        type: array
        items:
          $ref: '#/definitions/Data'
  Data:
    type: object
    required:
    - key
    - value
    properties:
      key:
        type: string
        example: username
      value:
        type: string
        example: Lars
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
# Added by API Auto Mocking Plugin
basePath: /rebel-l/Session/1.0.0