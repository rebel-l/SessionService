swagger: "2.0"
info:
  description: "This API is for a session service."
  version: "0.2.0"
  title: "SessionService API"
  contact:
    name: "Rebel-L"
    url: "https://github.com/rebel-l"
    email: "dj@rebel-l.net"
  license:
    name: "GPL-3.0"
    url: "https://www.gnu.org/licenses/gpl-3.0.en.html"
host: "virtserver.swaggerhub.com"
basePath: "/rebel-l/Session/1.0.0"
tags:
- name: "external"
  description: "external calls"
- name: "internal"
  description: "secure internal calls"
schemes:
- "https"
- "http"
consumes:
- "application/json"
produces:
- "application/json"
- "text/html"
paths:
  /docs:
    get:
      tags:
      - "external"
      summary: "Endpoint to this documentation."
      description: "This is the endpoint to get this documentation."
      operationId: "docs"
      produces:
      - "text/html"
      parameters: []
      responses:
        200:
          description: "Sends the html for the documentation."
  /ping:
    get:
      tags:
      - "external"
      summary: "Quick check if service is operating."
      description: "It's a quick check if the service is online and is able to handle\
        \ requests.\n"
      operationId: "ping"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "session service is operating normal"
          schema:
            $ref: "#/definitions/PingResponseSuccess"
        503:
          description: "service or storage is unavailable (or both). check the response\
            \ details."
          schema:
            $ref: "#/definitions/PingResponseFailure"
  /session:
    get:
      tags:
      - "internal"
      summary: "Returns a session for a specific id."
      description: "By passing in the appropriate options, you can load the sesions\
        \ for a \nspecific id. If no id is provided in the parameters it returns a\
        \ new\nand empty session.\n"
      operationId: "loadSession"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "pass the session id you want to load"
        required: false
        type: "string"
        format: "uuid"
      - name: "regenerateId"
        in: "query"
        description: "forces the service to generate a new session id."
        required: false
        type: "boolean"
      - name: "keys"
        in: "query"
        description: "a comma seperated list of keys to return in the data object"
        required: false
        type: "string"
        format: "field1,field2"
      - name: "domain"
        in: "query"
        description: "an optional domain for the session"
        required: false
        type: "string"
        format: "^([0-9a-zA-Z-]+[\\.])+[0-9a-zA-Z-]+$"
      responses:
        200:
          description: "session id found and returned"
          schema:
            $ref: "#/definitions/SessionResponse"
        400:
          description: "bad input parameter"
        403:
          description: "The client is not allowed to do this request."
        404:
          description: "session was not found or has expired"
      security:
      - apiKey: []
      - appId: []
    put:
      tags:
      - "internal"
      summary: "updates a session"
      description: "Updates the session."
      operationId: "updateSession"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "session"
        description: "pass the session you want to update"
        required: false
        schema:
          $ref: "#/definitions/SessionBody"
      responses:
        200:
          description: "session updated"
          schema:
            $ref: "#/definitions/SessionResponse"
        201:
          description: "session created if id is omitted in the body"
          schema:
            $ref: "#/definitions/SessionResponse"
        400:
          description: "invalid input, data invalid"
        403:
          description: "The client is not allowed to do this request."
        404:
          description: "session was not found or has expired"
      security:
      - apiKey: []
      - appId: []
    delete:
      tags:
      - "internal"
      summary: "deletes a session"
      description: "Deletes a session and returns a new empty one."
      operationId: "deleteSession"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "pass the session id you want to delete"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "session id found and deleted"
          schema:
            $ref: "#/definitions/SessionResponse"
        400:
          description: "bad input parameter"
        403:
          description: "The client is not allowed to do this request."
        404:
          description: "session was not found or has expired"
      security:
      - apiKey: []
      - appId: []
securityDefinitions:
  apiKey:
    type: "apiKey"
    name: "X-API-KEY"
    in: "header"
  appId:
    type: "apiKey"
    name: "X-APP-ID"
    in: "header"
definitions:
  PingResponseSuccess:
    type: "object"
    required:
    - "success"
    properties:
      success:
        type: "string"
        format: "^OK|FAIL$"
        example: "OK"
      summary:
        $ref: "#/definitions/PingResponseSuccess_summary"
  PingResponseFailure:
    type: "object"
    required:
    - "success"
    properties:
      success:
        type: "string"
        format: "^OK|FAIL$"
        example: "FAIL"
      summary:
        $ref: "#/definitions/PingResponseFailure_summary"
  SessionResponse:
    type: "object"
    required:
    - "data"
    - "id"
    - "lifetime"
    properties:
      id:
        type: "string"
        format: "uuid"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      data:
        type: "array"
        items:
          $ref: "#/definitions/Data"
      lifetime:
        type: "integer"
        format: "int32"
        example: 1800
      expires:
        type: "integer"
        format: "timestamp"
        example: 1484485453
      domain:
        type: "string"
        format: "^([0-9a-zA-Z-]+[\\.])+[0-9a-zA-Z-]+$"
        example: "www.dancedancerevolution.party"
  SessionBody:
    type: "object"
    required:
    - "data"
    - "id"
    properties:
      id:
        type: "string"
        format: "uuid"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      data:
        type: "array"
        items:
          $ref: "#/definitions/Data"
  Data:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      key:
        type: "string"
        example: "username"
      value:
        type: "string"
        example: "Lars"
  PingResponseSuccess_summary:
    required:
    - "service"
    - "storage"
    properties:
      service:
        type: "string"
        format: "^(PONG)*$"
        example: "PONG"
      storage:
        type: "string"
        format: "^(PONG)*$"
        example: "PONG"
  PingResponseFailure_summary:
    required:
    - "service"
    - "storage"
    properties:
      service:
        type: "string"
        format: "^(PONG)*$"
        example: ""
      storage:
        type: "string"
        format: "^(PONG)*$"
        example: ""
